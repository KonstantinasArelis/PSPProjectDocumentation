openapi: 3.0.3
info:
  title: PlayStation Portable - OpenAPI 3.0
  description: |-
    This is the API documentation for the system design course at Vilnius University. The creators team name is PlayStation Portable.
  version: 1.0.11
tags:
  - name: order
  - name: employee
  - name: permission
  - name: reservation
  - name: transaction
  - name: surcharge
  - name: tax
  - name: discount
  - name: merchant
paths:
  /order:
    put:
      tags:
        - order
      summary: Update an order
      requestBody:
        description: An order object that is to be updated.  
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful operation
    post:
      tags:
        - order
      summary: Create an order
      requestBody:
        description: An order object that is to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        '200':
          description: Successful operation
  /order/{orderId}:
    get:
      parameters:
        - name: orderId
          in: path
          description: Finds a specific order by its ID
          required: true
          schema:
            type: integer
      tags:
        - order
      summary: Find order by ID
      responses:
        200:
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
    delete:
      parameters:
        - name: orderId
          in: path
          description: Deletes a specific order by its ID
          required: true
          schema:
            type: integer
      tags:
        - order
      summary: Delete order by ID
      responses:
        200:
          description: Successful operation
  /order/{EmployeeId}:
    get:
      parameters:
        - name: EmployeeId
          in: path
          description: Find all orders by their owner
          required: true
          schema:
            type: integer
      tags:
        - order
      summary: Find all orders by their owner
      responses:
        200:
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/OrderArray'
  /order/{OrderStatus}:
    get:
      parameters:
        - name: OrderStatus
          in: path
          description: Finds orders with a status
          required: true
          schema:
            type: string
      tags:
        - order
      summary: Find orders by status
      responses:
        200:
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/OrderArray'
  /transaction:
    put:
      tags:
        - transaction
      summary: Update an transaction
      requestBody:
        description: Transaction that is going to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      responses:
        '200':
          description: Successful operation
    post:
      tags:
        - transaction
      summary: Create an transaction
      requestBody:
        description: Transaction that is going to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      responses:
        '200':
          description: Successful operation
  /transaction/{transactionId}:
    get:
      parameters:
        - name: transactionId
          in: path
          description: Finds a specific transaction by its Id
          required: true
          schema:
            type: integer
      tags:
        - transaction
      summary: Find transaction by Id
      responses:
        200:
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
    delete:
      parameters:
        - name: transactionId
          in: path
          description: Deletes a specific transaction by its Id
          required: true
          schema:
            type: integer
      tags:
        - transaction
      summary: Delete transaction by Id
      responses:
        200:
          description: Successful operation
  /transaction/{TransactionStatus}:
    get:
      parameters:
        - name: TransactionStatus
          in: path
          description: Finds transaction with a the given status
          required: true
          schema:
            type: string
      tags:
        - transaction
      summary: Find transaction by status
      responses:
        200:
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsArray'
  /surcharge:
    put:
      tags:
        - surcharge
      summary: Update a surcharge
      requestBody:
        description: A surcharge object that is to be updated.  
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Surcharge'
        required: true
      responses:
        '200':
          description: Successful operation
    post:
      tags:
        - surcharge
      summary: Create a surcharge
      requestBody:
        description: A surcharge object that is to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Surcharge'
        required: true
      responses:
        '200':
          description: Successful operation
    get:
      tags:
        - surcharge
      summary: Get all surcharges
      responses:
        200:
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/SurchargeArray'
  /surcharge/{surchargeId}:
    get:
      parameters:
        - name: surchargeId
          in: path
          description: Finds a specific surcharge by its ID
          required: true
          schema:
            type: integer
      tags:
        - surcharge
      summary: Find surcharge by ID
      responses:
        200:
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Surcharge'
    delete:
      parameters:
        - name: surchargeId
          in: path
          description: Deletes a specific surcharge by its ID
          required: true
          schema:
            type: integer
      tags:
        - surcharge
      summary: Delete surcharge by ID
      responses:
        200:
          description: Successful operation
  /surcharge/{surchargeStatus}:
    get:
      parameters:
        - name: surchargeStatus
          in: path
          description: Finds surcharges with a status
          required: true
          schema:
            type: string
      tags:
        - surcharge
      summary: Find surcharges by status
      responses:
        200:
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/SurchargeArray'
  /discount:
    put:
      tags:
        - discount
      summary: Update a discount
      requestBody:
        description: A discount object that is to be updated.  
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Discount'
        required: true
      responses:
        '200':
          description: Successful operation
    post:
      tags:
        - discount
      summary: Create a discount
      requestBody:
        description: A discount object that is to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Discount'
        required: true
      responses:
        '200':
          description: Successful operation
    get:
      tags:
        - discount
      summary: Get all discounts
      responses:
        200:
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountArray'
  /discount/{discountId}:
    get:
      parameters:
        - name: discountId
          in: path
          description: Finds a specific discount by its ID
          required: true
          schema:
            type: integer
      tags:
        - discount
      summary: Find discount by ID
      responses:
        200:
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Discount'
    delete:
      parameters:
        - name: discountId
          in: path
          description: Deletes a specific discount by its ID
          required: true
          schema:
            type: integer
      tags:
        - discount
      summary: Delete discount by ID
      responses:
        200:
          description: Successful operation
  /discount/{discountStatus}:
    get:
      parameters:
        - name: discountStatus
          in: path
          description: Finds discounts with a status
          required: true
          schema:
            type: string
      tags:
        - discount
      summary: Find discounts by status
      responses:
        200:
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountArray'
  /employee/{EmployeeId}:
    get:
      tags:
        - employee
      summary: Get an employee by ID (or the permissions of that employee)
      parameters:
        - name: EmployeeId
          in: path
          description: Employee ID
          required: true
          schema:
            type: integer
        - name: include
          in: query
          description: Get employee permissions
          schema:
            type: string
            enum: [permissions] 
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Employee' 
                  - $ref: '#/components/schemas/PermissionArray'
                discriminator:
                    propertyName: permissions  # Add a discriminator
                    mapping:
                      true: '#/components/schemas/PermissionArray'
                      false: '#/components/schemas/Employee'
    delete:
      parameters:
        - name: EmployeeId
          in: path
          description: Delete employee by ID
          required: true
          schema:
            type: number
      tags:
        - employee
      summary: Delete an employee object by Id
      responses:
        200:
          description: Successful operation
  /employee/{Status}:
    get:
      parameters:
        - name: Status
          in: path
          description: Find employee's by status
          required: true
          schema:
            type: number
      tags:
        - employee
      summary: Find employee's by status
      responses:
        200:
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeArray'
  /employee/{Organisation}:
    get:
      parameters:
        - name: Organisation
          in: path
          description: Find employee's by organisation
          required: true
          schema:
            type: number
      tags:
        - employee
      summary: Find employee's by organisation
      responses:
        200:
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeArray'
  /employee:
    post:
      tags:
        - employee
      summary: Create an employee
      requestBody:
        description: An employee object that is to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      responses:
        '200':
          description: Successful operation
    put:
      tags:
        - employee
      summary: Update an employee
      requestBody:
        description: An employee object that is to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
        required: true
      responses:
        '200':
          description: Successful operation
  /permission:
    post:
      tags:
        - permission
      summary: Assign a permission
      requestBody:
        description: A permission object that is to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Permission'
        required: true
      responses:
        '200':
          description: Successful operation
  /permission/{PermissionId}:
    delete:
      tags:
        - permission
      summary: Delete a permission
      parameters:
        - name: PermissionId
          in: path
          description: Delete permission
          required: true
          schema:
            type: number
      responses:
        200:
          description: Successful operation
          
  /reservation:
    post:
      tags:
        - reservation
      summary: Create a reservation
      requestBody:
        description: A reservation object that is to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
        required: true
      responses:
        '200':
          description: Reservation created successfully
    
    put:
      tags:
        - reservation
      summary: Update a reservation
      requestBody:
        description: A reservation object to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
        required: true
      responses:
        '200':
          description: Reservation updated successfully

    get:
      tags:
        - reservation
      summary: Get all reservations
      responses:
        '200':
          description: A list of reservations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReservationArray'

  /reservation/{ReservationId}:
    get:
      tags:
        - reservation
      summary: Get a reservation by ID
      parameters:
        - name: ReservationId
          in: path
          description: Reservation ID to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reservation object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'

    delete:
      tags:
        - reservation
      summary: Delete a reservation by ID
      parameters:
        - name: ReservationId
          in: path
          description: Reservation ID to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Reservation deleted successfully

  /availability/general:
    get:
      tags:
        - reservation
      summary: Get available times for reservations in general
      responses:
        '200':
          description: A list of available times
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: ["10:00 AM", "11:00 AM", "1:00 PM"]

  /availability/organisation/{organisationId}:
    get:
      tags:
        - reservation
      parameters:
        - name: organisationId
          in: path
          description: The ID of the organisation
          required: true
          schema:
            type: string
      summary: Get available times for reservations at a specific organisation
      responses:
        '200':
          description: A list of available times for the organisation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: ["9:00 AM", "12:00 PM", "3:00 PM"]

  /availability/employee/{employeeId}:
    get:
      tags:
        - reservation
      parameters:
        - name: employeeId
          in: path
          description: The ID of the employee
          required: true
          schema:
            type: string
      summary: Get available times for reservations for a specific employee
      responses:
        '200':
          description: A list of available times for the employee
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: ["11:00 AM", "2:00 PM", "4:00 PM"]

  /merchant:
    post:
      tags:
        - merchant
      summary: Create an merchant
      requestBody:
        description: A merchant object that is to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organisation'
        required: true
      responses:
        '200':
          description: merchant created successfully
    get:
      tags:
        - merchant
      summary: Get all organisations
      responses:
        '200':
          description: A list of organisations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/merchantArray'

  /merchant/{merchantId}:
    get:
      tags:
        - merchant
      parameters:
        - name: merchantId
          in: path
          description: Finds a specific merchant by its ID
          required: true
          schema:
            type: integer
      summary: Find merchant by ID
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/merchant'
    put:
      tags:
        - merchant
      parameters:
        - name: merchantId
          in: path
          description: ID of the merchant to be updated
          required: true
          schema:
            type: integer
      summary: Update a merchant
      requestBody:
        description: A merchant object that is to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/merchant'
        required: true
      responses:
        '200':
          description: merchant updated successfully
    delete:
      tags:
        - merchant
      parameters:
        - name: merchantId
          in: path
          description: Deletes a specific merchant by its ID
          required: true
          schema:
            type: integer
      summary: Delete merchant by ID
      responses:
        '200':
          description: merchant deleted successfully
  /menu:
    get:
      tags:
        - menu
      summary: Find all menu items
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Menu'
        '404':
          description: Menu items not found
  /menu/item:
    put:
      tags: 
        - menu
      summary: Update a menu item
      requestBody:
        description: Update a menu item by id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Menu'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '400':
          description: Invalid input
        '404':
          description: Menu item not found
        '422':
          description: Validation exception
    post:
      tags: 
        - menu
      summary: Create a menu item
      requestBody:
        description: Add a new menu item to a menu
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Menu'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /menu/item/{menuItemId}:
    get:
      parameters:
        - name: menuItemId
          in: path
          description: Finds a specific menu item by its ID
          required: true
          schema:
            type: integer
      tags:
        - menu
      summary: Find order by ID
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
        '400':
          description: Invalid ID supplied
        '404':
          description: Menu item not found
    delete:
      parameters:
        - name: menuItemId
          in: path
          description: Deletes a specific menu item by its ID
          required: true
          schema:
            type: integer
      tags:
        - menu
      summary: Delete menu item by ID
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Menu item not found
  /menu/item/{Status}:
    get:
      parameters:
        - name: Status
          in: path
          description: Finds menu items by their status
          required: true
          schema:
            type: string
      tags:
        - menu
      summary: Find menu items by status
      responses:
        '200':
          description: Successful operation
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Menu'
        '400':
          description: Invalid status supplied
        '404':
          description: Menu items not found
  /tax:
    put:
      tags:
        - tax
      summary: Update a tax
      requestBody:
        description: Tax object that is to be updated.  
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tax'
        required: true
      responses:
        '200':
          description: Successful operation
    post:
      tags:
        - tax
      summary: Create a tax
      requestBody:
        description: Tax object that is to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tax'
        required: true
      responses:
        '200':
          description: Successful operation
    get:
      tags:
        - tax
      summary: Get all taxes
      responses:
        200:
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/TaxArray'
  /tax/{taxId}:
    get:
      parameters:
        - name: taxId
          in: path
          description: Finds a specific tax by its Id
          required: true
          schema:
            type: integer
      tags:
        - tax
      summary: Find tax by Id
      responses:
        200:
          description: Successful operation
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Tax'
    delete:
      parameters:
        - name: taxId
          in: path
          description: Deletes a specific tax by its Id
          required: true
          schema:
            type: integer
      tags:
        - tax
      summary: Delete tax by Id
      responses:
        200:
          description: Successful operation
components:
  schemas:
    Order:
      type: object
      properties:
        OrderId:
          type: number
          format: int64
          example: 10
        CreationDateTime:
          type: string
          format: date-time
        OrderOwner:
          type: number
          format: int64
          example: 5
        OrderStatus:
          type: string
          example: open
        Tip:
          type: number
          example: 6.4
        ReceiptStatus:
          type: string
          example: printed
        customerName:
          type: string
          example: John
        TableName:
          type: string
          example: By the window
        OrderType:
          type: string
          example: Dine in
    OrderArray:
      type: array
      items: 
        $ref: '#/components/schemas/Order'
    Discount:
      type: object
      properties:
        DiscountId:
          type: number
          format: int64
          example: 10
        Name:
          type: string
          example: special October offer
        Value:
          type: number
          example: 7.1
        Type:
          type: string
          example: Percentage
        CreationDateTime:
          type: string
          format: date-time
        Status:
          type: string
          example: Active
        TimeSensitive:
          type: string
          example: Yes
    TaxArray:
      type: array
      items: 
        $ref: '#/components/schemas/Tax'
    Tax:
      type: object
      properties:
        TaxId:
          type: number
          format: int64
          example: 17
        Name:
          type: string
          example: VAT tax
        Value:
          type: number
          example: 21.1
        Type:
          type: string
          example: "Percentage"
        CreationDateTime:
          type: string
          format: date-time
        Status:
          type: string
          example: "Active"
        TimeSensitive:
          type: string
          example: Yes
        Minute:
          type: string
          example: "21"
        Hour:
          type: string
          example: "5"
        Day(Month):
          type: string
          example: "17"
        Month:
          type: string
          example: "September"
        Day(Week):
          type: string
          example: "Tuesday"
    TransactionsArray:
      type: array
      items: 
        $ref: '#/components/schemas/Transaction'
    Transaction:
      type: object
      properties:
        TransactionId:
          type: number
          format: int64
          example: 122
        TransactionOrderId:
          type: number
          format: int64
          example: 43
        CreationDateTime:
          type: string
          format: date-time
        TransactionType:
          type: string
          example:
        Amount:
          type: number
          example: 21.1
        Status:
          type: string
          example: "Batched out"
        Currency:
          type: string
          example: "Eur"
    Employee:
      type: object
      properties:
        EmployeeId:
          type: number
          format: int64
          example: 30
        Name:
          type: string
          example: John
        Role:
          type: string
          example: Cook
        CreationDateTime:
          type: string
          example: 2024-20-08 08:24
        Status:
          type: string
          example: Active
        Password:
          type: string
          example: 1234
        Organisation:
          type: number
          format: int64
          example: 50
        Hourly:
          type: boolean
          example: true
        Daily:
          type: boolean
          example: false
        Weekly:
          type: boolean
          example: true
        Monthly:
          type: boolean
          example: false
        Annually:
          type: boolean
          example: true
        Minute:
          type: string
          example: "30"
        Hour:
          type: string
          example: "2"
        Day(Month):
          type: string
          example: "15"
        Month:
          type: string
          example: "March"
        Day(Week):
          type: string
          example: "Monday"
    EmployeeArray:
      type: array
      items:
        $ref: '#/components/schemas/Employee'
    Permission:
      type: object
      properties:
        PermissionId:
          type: number
          format: int64
          example: 40
        PermissionTemplateId:
          type: number
          format: int64
          example: 50
        EmployeeId:
          type: number
          format: int64
          example: 50
        CreationDateTime:
          type: string
          example: 20024-20-08 08:59
    PermissionArray:
      type: array
      items:
        $ref: '#/components/schemas/Permission'
    DiscountArray:
      type: array
      items: 
        $ref: '#/components/schemas/Discount'
    Surcharge:
      type: object
      properties:
        SurchargeId:
          type: number
          format: int64
          example: 10
        Name:
          type: string
          example: surcharge1
        Value:
          type: number
          example: 7.1
        Type:
          type: string
          example: Percentage
        CreationDateTime:
          type: string
          format: date-time
        Status:
          type: string
          example: Active
        TimeSensitive:
          type: string
          example: Yes
    SurchargeArray:
      type: array
      items: 
        $ref: '#/components/schemas/Surcharge'
    Reservation:
      type: object
      properties:
        ReservationId:
          type: number
          format: int64
          example: 27
        ReservationName:
          type: string
          example: Meeting Room A
        CustomerName:
          type: string
          example: John Doe
        CreationDateTime:
          type: string
          format: date-time
        StartTime:
          type: string
          format: date-time
        EndTime:
          type: string
          format: date-time
        AssignedEmployee:
          type: number
          format: int64
          example: 13
        NotificationStatus:
          type: string
          enum:
            - Sent
            - Not sent
    ReservationArray:
      type: array
      items:
        $ref: '#/components/schemas/Reservation'
    Organisation:
      type: object
      properties:
        ID:
          type: number
          format: int64
          example: 29
        Name:
          type: string
          example: "Example Organisation"
        CreationDateTime:
          type: string
          format: date-time
        Status:
          type: string
          enum: 
            - Active
            - Inactive
          example: "Active"
    
    merchantArray:
      type: array
      items:
        $ref: '#/components/schemas/merchant'
        
    Menu:
      type: object
      properties:
        MenuItemId:
          type: number
          format: int64
          example: 3
        Name:
          type: string
          example: Chips
        Price:
          type: number
          example: 2.99
        AmountLeft:
          type: number
          format: int64
          example: 15
        SetLimit:
          type: string
          example: No
        Status:
          type: string
          example: Active
    merchant:
      type: object
      properties:
        MerchantId:
          type: number
          format: int64
          example: 4
        DisplayName:
          type: string
          example: Some Pretty Name
        LegalName:
          type: string
          example: Joseph Joestar
        Address:
          type: string
          example: 18455 S Figueroa St, Gardena CA 90248-4503
        Email:
          type: string
          example: joseph.joestar@starCo.com
        MainPhone:
          type: string
          example: (863) 773-5067
        SecondaryPhone:
          type: string
          example: (765) 273-5707
        OpeningHour:
          type: string
          format: time
          example: 09:00:00
        ClosingHour:
          type: string
          format: time
          example: 18:00:00
